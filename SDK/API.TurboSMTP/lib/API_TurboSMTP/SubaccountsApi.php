<?php
/**
 * SubaccountsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  API_TurboSMTP_Invoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TurboSMTP Public APIs
 *
 * This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Useful Links for Developers  - [Email SDKs for Developers](https://serversmtp.com/email-sdks-for-developers) - [Webhooks Reference](https://serversmtp.com/event-webhook-reference/) - [Email API for Developers](https://serversmtp.com/email-api-for-developers)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.
 *
 * The version of the OpenAPI document: 2.0.0-oas3
 * Contact: api@turbo-smtp.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace API_TurboSMTP_Invoker\API_TurboSMTP;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use API_TurboSMTP_Invoker\ApiException;
use API_TurboSMTP_Invoker\Configuration;
use API_TurboSMTP_Invoker\HeaderSelector;
use API_TurboSMTP_Invoker\ObjectSerializer;

/**
 * SubaccountsApi Class Doc Comment
 *
 * @category Class
 * @package  API_TurboSMTP_Invoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SubaccountsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'checkIfAccountEmailExists' => [
            'application/json',
        ],
        'createSubaccount' => [
            'application/json',
        ],
        'deleteLogoFile' => [
            'application/json',
        ],
        'getActivePlan' => [
            'application/json',
        ],
        'getAgencySettings' => [
            'application/json',
        ],
        'getLogoFile' => [
            'application/json',
        ],
        'getSubaccountDetails' => [
            'application/json',
        ],
        'getSubaccounts' => [
            'application/json',
        ],
        'subaccountAuthenticationLogin' => [
            'application/json',
        ],
        'updateAgencySettings' => [
            'application/json',
        ],
        'updateSubaccountDetails' => [
            'application/json',
        ],
        'updateSubaccountSMTPLimit' => [
            'application/json',
        ],
        'updateSubaccountStatus' => [
            'application/json',
        ],
        'uploadLogoFile' => [
            'multipart/form-data',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation checkIfAccountEmailExists
     *
     * Check if account email exists in turboSMTP
     *
     * @param  string $email Email address. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkIfAccountEmailExists'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommmonResultResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody
     */
    public function checkIfAccountEmailExists($email, string $contentType = self::contentTypes['checkIfAccountEmailExists'][0])
    {
        list($response) = $this->checkIfAccountEmailExistsWithHttpInfo($email, $contentType);
        return $response;
    }

    /**
     * Operation checkIfAccountEmailExistsWithHttpInfo
     *
     * Check if account email exists in turboSMTP
     *
     * @param  string $email Email address. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkIfAccountEmailExists'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommmonResultResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkIfAccountEmailExistsWithHttpInfo($email, string $contentType = self::contentTypes['checkIfAccountEmailExists'][0])
    {
        $request = $this->checkIfAccountEmailExistsRequest($email, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommmonResultResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommmonResultResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommmonResultResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommmonResultResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommmonResultResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkIfAccountEmailExistsAsync
     *
     * Check if account email exists in turboSMTP
     *
     * @param  string $email Email address. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkIfAccountEmailExists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkIfAccountEmailExistsAsync($email, string $contentType = self::contentTypes['checkIfAccountEmailExists'][0])
    {
        return $this->checkIfAccountEmailExistsAsyncWithHttpInfo($email, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkIfAccountEmailExistsAsyncWithHttpInfo
     *
     * Check if account email exists in turboSMTP
     *
     * @param  string $email Email address. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkIfAccountEmailExists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkIfAccountEmailExistsAsyncWithHttpInfo($email, string $contentType = self::contentTypes['checkIfAccountEmailExists'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommmonResultResponseBody';
        $request = $this->checkIfAccountEmailExistsRequest($email, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkIfAccountEmailExists'
     *
     * @param  string $email Email address. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkIfAccountEmailExists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function checkIfAccountEmailExistsRequest($email, string $contentType = self::contentTypes['checkIfAccountEmailExists'][0])
    {

        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling checkIfAccountEmailExists'
            );
        }


        $resourcePath = '/subaccounts/email-exists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'Email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSubaccount
     *
     * Create Subaccount.
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountCreateRequest $subaccount_create_request subaccount_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubaccount'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody
     */
    public function createSubaccount($subaccount_create_request, string $contentType = self::contentTypes['createSubaccount'][0])
    {
        list($response) = $this->createSubaccountWithHttpInfo($subaccount_create_request, $contentType);
        return $response;
    }

    /**
     * Operation createSubaccountWithHttpInfo
     *
     * Create Subaccount.
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountCreateRequest $subaccount_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubaccount'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSubaccountWithHttpInfo($subaccount_create_request, string $contentType = self::contentTypes['createSubaccount'][0])
    {
        $request = $this->createSubaccountRequest($subaccount_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSubaccountAsync
     *
     * Create Subaccount.
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountCreateRequest $subaccount_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubaccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubaccountAsync($subaccount_create_request, string $contentType = self::contentTypes['createSubaccount'][0])
    {
        return $this->createSubaccountAsyncWithHttpInfo($subaccount_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSubaccountAsyncWithHttpInfo
     *
     * Create Subaccount.
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountCreateRequest $subaccount_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubaccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubaccountAsyncWithHttpInfo($subaccount_create_request, string $contentType = self::contentTypes['createSubaccount'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount';
        $request = $this->createSubaccountRequest($subaccount_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSubaccount'
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountCreateRequest $subaccount_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubaccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSubaccountRequest($subaccount_create_request, string $contentType = self::contentTypes['createSubaccount'][0])
    {

        // verify the required parameter 'subaccount_create_request' is set
        if ($subaccount_create_request === null || (is_array($subaccount_create_request) && count($subaccount_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subaccount_create_request when calling createSubaccount'
            );
        }


        $resourcePath = '/subaccounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($subaccount_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($subaccount_create_request));
            } else {
                $httpBody = $subaccount_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLogoFile
     *
     * Delete agency logo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLogoFile'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError
     */
    public function deleteLogoFile(string $contentType = self::contentTypes['deleteLogoFile'][0])
    {
        list($response) = $this->deleteLogoFileWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation deleteLogoFileWithHttpInfo
     *
     * Delete agency logo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLogoFile'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLogoFileWithHttpInfo(string $contentType = self::contentTypes['deleteLogoFile'][0])
    {
        $request = $this->deleteLogoFileRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLogoFileAsync
     *
     * Delete agency logo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLogoFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLogoFileAsync(string $contentType = self::contentTypes['deleteLogoFile'][0])
    {
        return $this->deleteLogoFileAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLogoFileAsyncWithHttpInfo
     *
     * Delete agency logo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLogoFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLogoFileAsyncWithHttpInfo(string $contentType = self::contentTypes['deleteLogoFile'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody';
        $request = $this->deleteLogoFileRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLogoFile'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLogoFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLogoFileRequest(string $contentType = self::contentTypes['deleteLogoFile'][0])
    {


        $resourcePath = '/subaccounts/logo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getActivePlan
     *
     * Get subaccount active plan.
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getActivePlan'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody
     */
    public function getActivePlan($id, string $contentType = self::contentTypes['getActivePlan'][0])
    {
        list($response) = $this->getActivePlanWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getActivePlanWithHttpInfo
     *
     * Get subaccount active plan.
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getActivePlan'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getActivePlanWithHttpInfo($id, string $contentType = self::contentTypes['getActivePlan'][0])
    {
        $request = $this->getActivePlanRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getActivePlanAsync
     *
     * Get subaccount active plan.
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getActivePlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActivePlanAsync($id, string $contentType = self::contentTypes['getActivePlan'][0])
    {
        return $this->getActivePlanAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getActivePlanAsyncWithHttpInfo
     *
     * Get subaccount active plan.
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getActivePlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActivePlanAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getActivePlan'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan';
        $request = $this->getActivePlanRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getActivePlan'
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getActivePlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getActivePlanRequest($id, string $contentType = self::contentTypes['getActivePlan'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getActivePlan'
            );
        }


        $resourcePath = '/subaccounts/{Id}/active-plan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'Id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAgencySettings
     *
     * Update Agency details
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAgencySettings'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\AgencySettings|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError
     */
    public function getAgencySettings(string $contentType = self::contentTypes['getAgencySettings'][0])
    {
        list($response) = $this->getAgencySettingsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getAgencySettingsWithHttpInfo
     *
     * Update Agency details
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAgencySettings'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\AgencySettings|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAgencySettingsWithHttpInfo(string $contentType = self::contentTypes['getAgencySettings'][0])
    {
        $request = $this->getAgencySettingsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AgencySettings' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AgencySettings' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AgencySettings', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AgencySettings';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AgencySettings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAgencySettingsAsync
     *
     * Update Agency details
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAgencySettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAgencySettingsAsync(string $contentType = self::contentTypes['getAgencySettings'][0])
    {
        return $this->getAgencySettingsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAgencySettingsAsyncWithHttpInfo
     *
     * Update Agency details
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAgencySettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAgencySettingsAsyncWithHttpInfo(string $contentType = self::contentTypes['getAgencySettings'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AgencySettings';
        $request = $this->getAgencySettingsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAgencySettings'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAgencySettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAgencySettingsRequest(string $contentType = self::contentTypes['getAgencySettings'][0])
    {


        $resourcePath = '/subaccounts/agency';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLogoFile
     *
     * Get agency logo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLogoFile'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\Logo|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError
     */
    public function getLogoFile(string $contentType = self::contentTypes['getLogoFile'][0])
    {
        list($response) = $this->getLogoFileWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getLogoFileWithHttpInfo
     *
     * Get agency logo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLogoFile'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\Logo|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLogoFileWithHttpInfo(string $contentType = self::contentTypes['getLogoFile'][0])
    {
        $request = $this->getLogoFileRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Logo' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Logo' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Logo', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Logo';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Logo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLogoFileAsync
     *
     * Get agency logo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLogoFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLogoFileAsync(string $contentType = self::contentTypes['getLogoFile'][0])
    {
        return $this->getLogoFileAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLogoFileAsyncWithHttpInfo
     *
     * Get agency logo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLogoFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLogoFileAsyncWithHttpInfo(string $contentType = self::contentTypes['getLogoFile'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Logo';
        $request = $this->getLogoFileRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLogoFile'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLogoFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLogoFileRequest(string $contentType = self::contentTypes['getLogoFile'][0])
    {


        $resourcePath = '/subaccounts/logo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubaccountDetails
     *
     * Get sub account details
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubaccountDetails'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody
     */
    public function getSubaccountDetails($id, string $contentType = self::contentTypes['getSubaccountDetails'][0])
    {
        list($response) = $this->getSubaccountDetailsWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getSubaccountDetailsWithHttpInfo
     *
     * Get sub account details
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubaccountDetails'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubaccountDetailsWithHttpInfo($id, string $contentType = self::contentTypes['getSubaccountDetails'][0])
    {
        $request = $this->getSubaccountDetailsRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubaccountDetailsAsync
     *
     * Get sub account details
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubaccountDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubaccountDetailsAsync($id, string $contentType = self::contentTypes['getSubaccountDetails'][0])
    {
        return $this->getSubaccountDetailsAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubaccountDetailsAsyncWithHttpInfo
     *
     * Get sub account details
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubaccountDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubaccountDetailsAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getSubaccountDetails'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount';
        $request = $this->getSubaccountDetailsRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubaccountDetails'
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubaccountDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSubaccountDetailsRequest($id, string $contentType = self::contentTypes['getSubaccountDetails'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getSubaccountDetails'
            );
        }


        $resourcePath = '/subaccounts/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'Id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubaccounts
     *
     * Get Subaccounts lists information
     *
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit The numbers of rows per page to return (optional, default to 10)
     * @param  string $filter_by_email Filter by email addresses that fully/partially match the search value. (optional)
     * @param  bool $filter_by_active Filter by subaccount status. (optional)
     * @param  string[] $filter_by_ip Filter by IP Addresses. (optional)
     * @param  string $orderby Field to sort by (optional, default to 'email')
     * @param  OrderType $ordertype ordertype (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubaccounts'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubAccountListSucessResponsetBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody
     */
    public function getSubaccounts($page = 1, $limit = 10, $filter_by_email = null, $filter_by_active = null, $filter_by_ip = null, $orderby = 'email', $ordertype = null, string $contentType = self::contentTypes['getSubaccounts'][0])
    {
        list($response) = $this->getSubaccountsWithHttpInfo($page, $limit, $filter_by_email, $filter_by_active, $filter_by_ip, $orderby, $ordertype, $contentType);
        return $response;
    }

    /**
     * Operation getSubaccountsWithHttpInfo
     *
     * Get Subaccounts lists information
     *
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit The numbers of rows per page to return (optional, default to 10)
     * @param  string $filter_by_email Filter by email addresses that fully/partially match the search value. (optional)
     * @param  bool $filter_by_active Filter by subaccount status. (optional)
     * @param  string[] $filter_by_ip Filter by IP Addresses. (optional)
     * @param  string $orderby Field to sort by (optional, default to 'email')
     * @param  OrderType $ordertype (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubaccounts'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubAccountListSucessResponsetBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubaccountsWithHttpInfo($page = 1, $limit = 10, $filter_by_email = null, $filter_by_active = null, $filter_by_ip = null, $orderby = 'email', $ordertype = null, string $contentType = self::contentTypes['getSubaccounts'][0])
    {
        $request = $this->getSubaccountsRequest($page, $limit, $filter_by_email, $filter_by_active, $filter_by_ip, $orderby, $ordertype, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubAccountListSucessResponsetBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubAccountListSucessResponsetBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubAccountListSucessResponsetBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubAccountListSucessResponsetBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubAccountListSucessResponsetBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubaccountsAsync
     *
     * Get Subaccounts lists information
     *
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit The numbers of rows per page to return (optional, default to 10)
     * @param  string $filter_by_email Filter by email addresses that fully/partially match the search value. (optional)
     * @param  bool $filter_by_active Filter by subaccount status. (optional)
     * @param  string[] $filter_by_ip Filter by IP Addresses. (optional)
     * @param  string $orderby Field to sort by (optional, default to 'email')
     * @param  OrderType $ordertype (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubaccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubaccountsAsync($page = 1, $limit = 10, $filter_by_email = null, $filter_by_active = null, $filter_by_ip = null, $orderby = 'email', $ordertype = null, string $contentType = self::contentTypes['getSubaccounts'][0])
    {
        return $this->getSubaccountsAsyncWithHttpInfo($page, $limit, $filter_by_email, $filter_by_active, $filter_by_ip, $orderby, $ordertype, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubaccountsAsyncWithHttpInfo
     *
     * Get Subaccounts lists information
     *
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit The numbers of rows per page to return (optional, default to 10)
     * @param  string $filter_by_email Filter by email addresses that fully/partially match the search value. (optional)
     * @param  bool $filter_by_active Filter by subaccount status. (optional)
     * @param  string[] $filter_by_ip Filter by IP Addresses. (optional)
     * @param  string $orderby Field to sort by (optional, default to 'email')
     * @param  OrderType $ordertype (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubaccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubaccountsAsyncWithHttpInfo($page = 1, $limit = 10, $filter_by_email = null, $filter_by_active = null, $filter_by_ip = null, $orderby = 'email', $ordertype = null, string $contentType = self::contentTypes['getSubaccounts'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubAccountListSucessResponsetBody';
        $request = $this->getSubaccountsRequest($page, $limit, $filter_by_email, $filter_by_active, $filter_by_ip, $orderby, $ordertype, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubaccounts'
     *
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit The numbers of rows per page to return (optional, default to 10)
     * @param  string $filter_by_email Filter by email addresses that fully/partially match the search value. (optional)
     * @param  bool $filter_by_active Filter by subaccount status. (optional)
     * @param  string[] $filter_by_ip Filter by IP Addresses. (optional)
     * @param  string $orderby Field to sort by (optional, default to 'email')
     * @param  OrderType $ordertype (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubaccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSubaccountsRequest($page = 1, $limit = 10, $filter_by_email = null, $filter_by_active = null, $filter_by_ip = null, $orderby = 'email', $ordertype = null, string $contentType = self::contentTypes['getSubaccounts'][0])
    {

        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling SubaccountsApi.getSubaccounts, must be bigger than or equal to 1.');
        }
        
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling SubaccountsApi.getSubaccounts, must be bigger than or equal to 1.');
        }
        






        $resourcePath = '/subaccounts/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_by_email,
            'filterByEmail', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_by_active,
            'filterByActive', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_by_ip,
            'filterByIP[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            'orderby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordertype,
            'ordertype', // param base name
            'OrderType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subaccountAuthenticationLogin
     *
     * Login to a subaccount
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\Email1 $email1 email1 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subaccountAuthenticationLogin'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthenticationLoginSucessResponsetBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody
     */
    public function subaccountAuthenticationLogin($email1, string $contentType = self::contentTypes['subaccountAuthenticationLogin'][0])
    {
        list($response) = $this->subaccountAuthenticationLoginWithHttpInfo($email1, $contentType);
        return $response;
    }

    /**
     * Operation subaccountAuthenticationLoginWithHttpInfo
     *
     * Login to a subaccount
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\Email1 $email1 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subaccountAuthenticationLogin'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthenticationLoginSucessResponsetBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function subaccountAuthenticationLoginWithHttpInfo($email1, string $contentType = self::contentTypes['subaccountAuthenticationLogin'][0])
    {
        $request = $this->subaccountAuthenticationLoginRequest($email1, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthenticationLoginSucessResponsetBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthenticationLoginSucessResponsetBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthenticationLoginSucessResponsetBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthenticationLoginSucessResponsetBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthenticationLoginSucessResponsetBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subaccountAuthenticationLoginAsync
     *
     * Login to a subaccount
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\Email1 $email1 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subaccountAuthenticationLogin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subaccountAuthenticationLoginAsync($email1, string $contentType = self::contentTypes['subaccountAuthenticationLogin'][0])
    {
        return $this->subaccountAuthenticationLoginAsyncWithHttpInfo($email1, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subaccountAuthenticationLoginAsyncWithHttpInfo
     *
     * Login to a subaccount
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\Email1 $email1 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subaccountAuthenticationLogin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subaccountAuthenticationLoginAsyncWithHttpInfo($email1, string $contentType = self::contentTypes['subaccountAuthenticationLogin'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthenticationLoginSucessResponsetBody';
        $request = $this->subaccountAuthenticationLoginRequest($email1, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subaccountAuthenticationLogin'
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\Email1 $email1 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subaccountAuthenticationLogin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function subaccountAuthenticationLoginRequest($email1, string $contentType = self::contentTypes['subaccountAuthenticationLogin'][0])
    {

        // verify the required parameter 'email1' is set
        if ($email1 === null || (is_array($email1) && count($email1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email1 when calling subaccountAuthenticationLogin'
            );
        }


        $resourcePath = '/subaccounts/authorize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($email1)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($email1));
            } else {
                $httpBody = $email1;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAgencySettings
     *
     * Update Agency details
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\BaseAgencySettings $base_agency_settings base_agency_settings (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAgencySettings'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError
     */
    public function updateAgencySettings($base_agency_settings, string $contentType = self::contentTypes['updateAgencySettings'][0])
    {
        list($response) = $this->updateAgencySettingsWithHttpInfo($base_agency_settings, $contentType);
        return $response;
    }

    /**
     * Operation updateAgencySettingsWithHttpInfo
     *
     * Update Agency details
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\BaseAgencySettings $base_agency_settings (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAgencySettings'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAgencySettingsWithHttpInfo($base_agency_settings, string $contentType = self::contentTypes['updateAgencySettings'][0])
    {
        $request = $this->updateAgencySettingsRequest($base_agency_settings, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAgencySettingsAsync
     *
     * Update Agency details
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\BaseAgencySettings $base_agency_settings (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAgencySettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAgencySettingsAsync($base_agency_settings, string $contentType = self::contentTypes['updateAgencySettings'][0])
    {
        return $this->updateAgencySettingsAsyncWithHttpInfo($base_agency_settings, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAgencySettingsAsyncWithHttpInfo
     *
     * Update Agency details
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\BaseAgencySettings $base_agency_settings (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAgencySettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAgencySettingsAsyncWithHttpInfo($base_agency_settings, string $contentType = self::contentTypes['updateAgencySettings'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody';
        $request = $this->updateAgencySettingsRequest($base_agency_settings, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAgencySettings'
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\BaseAgencySettings $base_agency_settings (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAgencySettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAgencySettingsRequest($base_agency_settings, string $contentType = self::contentTypes['updateAgencySettings'][0])
    {

        // verify the required parameter 'base_agency_settings' is set
        if ($base_agency_settings === null || (is_array($base_agency_settings) && count($base_agency_settings) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_agency_settings when calling updateAgencySettings'
            );
        }


        $resourcePath = '/subaccounts/agency';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($base_agency_settings)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($base_agency_settings));
            } else {
                $httpBody = $base_agency_settings;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSubaccountDetails
     *
     * Update sub account details
     *
     * @param  int $id Id (required)
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountUpdateRequest $subaccount_update_request subaccount_update_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubaccountDetails'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody
     */
    public function updateSubaccountDetails($id, $subaccount_update_request, string $contentType = self::contentTypes['updateSubaccountDetails'][0])
    {
        list($response) = $this->updateSubaccountDetailsWithHttpInfo($id, $subaccount_update_request, $contentType);
        return $response;
    }

    /**
     * Operation updateSubaccountDetailsWithHttpInfo
     *
     * Update sub account details
     *
     * @param  int $id Id (required)
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountUpdateRequest $subaccount_update_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubaccountDetails'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSubaccountDetailsWithHttpInfo($id, $subaccount_update_request, string $contentType = self::contentTypes['updateSubaccountDetails'][0])
    {
        $request = $this->updateSubaccountDetailsRequest($id, $subaccount_update_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSubaccountDetailsAsync
     *
     * Update sub account details
     *
     * @param  int $id Id (required)
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountUpdateRequest $subaccount_update_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubaccountDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubaccountDetailsAsync($id, $subaccount_update_request, string $contentType = self::contentTypes['updateSubaccountDetails'][0])
    {
        return $this->updateSubaccountDetailsAsyncWithHttpInfo($id, $subaccount_update_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSubaccountDetailsAsyncWithHttpInfo
     *
     * Update sub account details
     *
     * @param  int $id Id (required)
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountUpdateRequest $subaccount_update_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubaccountDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubaccountDetailsAsyncWithHttpInfo($id, $subaccount_update_request, string $contentType = self::contentTypes['updateSubaccountDetails'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\Subaccount';
        $request = $this->updateSubaccountDetailsRequest($id, $subaccount_update_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSubaccountDetails'
     *
     * @param  int $id Id (required)
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountUpdateRequest $subaccount_update_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubaccountDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSubaccountDetailsRequest($id, $subaccount_update_request, string $contentType = self::contentTypes['updateSubaccountDetails'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateSubaccountDetails'
            );
        }

        // verify the required parameter 'subaccount_update_request' is set
        if ($subaccount_update_request === null || (is_array($subaccount_update_request) && count($subaccount_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subaccount_update_request when calling updateSubaccountDetails'
            );
        }


        $resourcePath = '/subaccounts/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'Id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($subaccount_update_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($subaccount_update_request));
            } else {
                $httpBody = $subaccount_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSubaccountSMTPLimit
     *
     * Set subaccount smtp limit
     *
     * @param  int $id Id (required)
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountSMTPLimit $subaccount_smtp_limit subaccount_smtp_limit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubaccountSMTPLimit'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody
     */
    public function updateSubaccountSMTPLimit($id, $subaccount_smtp_limit, string $contentType = self::contentTypes['updateSubaccountSMTPLimit'][0])
    {
        list($response) = $this->updateSubaccountSMTPLimitWithHttpInfo($id, $subaccount_smtp_limit, $contentType);
        return $response;
    }

    /**
     * Operation updateSubaccountSMTPLimitWithHttpInfo
     *
     * Set subaccount smtp limit
     *
     * @param  int $id Id (required)
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountSMTPLimit $subaccount_smtp_limit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubaccountSMTPLimit'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSubaccountSMTPLimitWithHttpInfo($id, $subaccount_smtp_limit, string $contentType = self::contentTypes['updateSubaccountSMTPLimit'][0])
    {
        $request = $this->updateSubaccountSMTPLimitRequest($id, $subaccount_smtp_limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSubaccountSMTPLimitAsync
     *
     * Set subaccount smtp limit
     *
     * @param  int $id Id (required)
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountSMTPLimit $subaccount_smtp_limit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubaccountSMTPLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubaccountSMTPLimitAsync($id, $subaccount_smtp_limit, string $contentType = self::contentTypes['updateSubaccountSMTPLimit'][0])
    {
        return $this->updateSubaccountSMTPLimitAsyncWithHttpInfo($id, $subaccount_smtp_limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSubaccountSMTPLimitAsyncWithHttpInfo
     *
     * Set subaccount smtp limit
     *
     * @param  int $id Id (required)
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountSMTPLimit $subaccount_smtp_limit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubaccountSMTPLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubaccountSMTPLimitAsyncWithHttpInfo($id, $subaccount_smtp_limit, string $contentType = self::contentTypes['updateSubaccountSMTPLimit'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan';
        $request = $this->updateSubaccountSMTPLimitRequest($id, $subaccount_smtp_limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSubaccountSMTPLimit'
     *
     * @param  int $id Id (required)
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountSMTPLimit $subaccount_smtp_limit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubaccountSMTPLimit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSubaccountSMTPLimitRequest($id, $subaccount_smtp_limit, string $contentType = self::contentTypes['updateSubaccountSMTPLimit'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateSubaccountSMTPLimit'
            );
        }

        // verify the required parameter 'subaccount_smtp_limit' is set
        if ($subaccount_smtp_limit === null || (is_array($subaccount_smtp_limit) && count($subaccount_smtp_limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subaccount_smtp_limit when calling updateSubaccountSMTPLimit'
            );
        }


        $resourcePath = '/subaccounts/{Id}/updatesubaccountsmtplimit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'Id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($subaccount_smtp_limit)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($subaccount_smtp_limit));
            } else {
                $httpBody = $subaccount_smtp_limit;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSubaccountStatus
     *
     * Set subaccount status
     *
     * @param  int $id Id (required)
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActiveStatus $subaccount_active_status subaccount_active_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubaccountStatus'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody
     */
    public function updateSubaccountStatus($id, $subaccount_active_status, string $contentType = self::contentTypes['updateSubaccountStatus'][0])
    {
        list($response) = $this->updateSubaccountStatusWithHttpInfo($id, $subaccount_active_status, $contentType);
        return $response;
    }

    /**
     * Operation updateSubaccountStatusWithHttpInfo
     *
     * Set subaccount status
     *
     * @param  int $id Id (required)
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActiveStatus $subaccount_active_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubaccountStatus'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSubaccountStatusWithHttpInfo($id, $subaccount_active_status, string $contentType = self::contentTypes['updateSubaccountStatus'][0])
    {
        $request = $this->updateSubaccountStatusRequest($id, $subaccount_active_status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSubaccountStatusAsync
     *
     * Set subaccount status
     *
     * @param  int $id Id (required)
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActiveStatus $subaccount_active_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubaccountStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubaccountStatusAsync($id, $subaccount_active_status, string $contentType = self::contentTypes['updateSubaccountStatus'][0])
    {
        return $this->updateSubaccountStatusAsyncWithHttpInfo($id, $subaccount_active_status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSubaccountStatusAsyncWithHttpInfo
     *
     * Set subaccount status
     *
     * @param  int $id Id (required)
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActiveStatus $subaccount_active_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubaccountStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubaccountStatusAsyncWithHttpInfo($id, $subaccount_active_status, string $contentType = self::contentTypes['updateSubaccountStatus'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActivePlan';
        $request = $this->updateSubaccountStatusRequest($id, $subaccount_active_status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSubaccountStatus'
     *
     * @param  int $id Id (required)
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SubaccountActiveStatus $subaccount_active_status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubaccountStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSubaccountStatusRequest($id, $subaccount_active_status, string $contentType = self::contentTypes['updateSubaccountStatus'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateSubaccountStatus'
            );
        }

        // verify the required parameter 'subaccount_active_status' is set
        if ($subaccount_active_status === null || (is_array($subaccount_active_status) && count($subaccount_active_status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subaccount_active_status when calling updateSubaccountStatus'
            );
        }


        $resourcePath = '/subaccounts/{Id}/updatesubaccountstatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'Id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($subaccount_active_status)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($subaccount_active_status));
            } else {
                $httpBody = $subaccount_active_status;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadLogoFile
     *
     * Upload agency logo
     *
     * @param  \SplFileObject $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadLogoFile'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError
     */
    public function uploadLogoFile($file = null, string $contentType = self::contentTypes['uploadLogoFile'][0])
    {
        list($response) = $this->uploadLogoFileWithHttpInfo($file, $contentType);
        return $response;
    }

    /**
     * Operation uploadLogoFileWithHttpInfo
     *
     * Upload agency logo
     *
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadLogoFile'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadLogoFileWithHttpInfo($file = null, string $contentType = self::contentTypes['uploadLogoFile'][0])
    {
        $request = $this->uploadLogoFileRequest($file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonBadRequestResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadLogoFileAsync
     *
     * Upload agency logo
     *
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadLogoFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadLogoFileAsync($file = null, string $contentType = self::contentTypes['uploadLogoFile'][0])
    {
        return $this->uploadLogoFileAsyncWithHttpInfo($file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadLogoFileAsyncWithHttpInfo
     *
     * Upload agency logo
     *
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadLogoFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadLogoFileAsyncWithHttpInfo($file = null, string $contentType = self::contentTypes['uploadLogoFile'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonSuccessResponseBody';
        $request = $this->uploadLogoFileRequest($file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadLogoFile'
     *
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadLogoFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadLogoFileRequest($file = null, string $contentType = self::contentTypes['uploadLogoFile'][0])
    {



        $resourcePath = '/subaccounts/logo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
