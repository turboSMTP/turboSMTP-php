<?php
/**
 * EmailValidatorApi
 * PHP version 7.4
 *
 * @category Class
 * @package  API_TurboSMTP_Invoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TurboSMTP Public APIs
 *
 * This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Useful Links for Developers  - [Email SDKs for Developers](https://serversmtp.com/email-sdks-for-developers) - [Webhooks Reference](https://serversmtp.com/event-webhook-reference/) - [Email API for Developers](https://serversmtp.com/email-api-for-developers)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.
 *
 * The version of the OpenAPI document: 2.0.0-oas3
 * Contact: api@turbo-smtp.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace API_TurboSMTP_Invoker\API_TurboSMTP;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use API_TurboSMTP_Invoker\ApiException;
use API_TurboSMTP_Invoker\Configuration;
use API_TurboSMTP_Invoker\HeaderSelector;
use API_TurboSMTP_Invoker\ObjectSerializer;

/**
 * EmailValidatorApi Class Doc Comment
 *
 * @category Class
 * @package  API_TurboSMTP_Invoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EmailValidatorApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteEmailValidationListById' => [
            'application/json',
        ],
        'exportCSVValidatedEmailsByList' => [
            'application/json',
        ],
        'getEmailValidationDataByEmailId' => [
            'application/json',
        ],
        'getEmailValidationListSummary' => [
            'application/json',
        ],
        'getEmailValidationLists' => [
            'application/json',
        ],
        'getEmailValidationSubscription' => [
            'application/json',
        ],
        'getValidatedEmailsByList' => [
            'application/json',
        ],
        'uploadEmailValidationFile' => [
            'multipart/form-data',
        ],
        'validateEmail' => [
            'application/json',
        ],
        'validateEmailValidatorList' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteEmailValidationListById
     *
     * Delete email validation list
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailValidationListById'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorListDeleteSuccess|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError
     */
    public function deleteEmailValidationListById($id, string $contentType = self::contentTypes['deleteEmailValidationListById'][0])
    {
        list($response) = $this->deleteEmailValidationListByIdWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation deleteEmailValidationListByIdWithHttpInfo
     *
     * Delete email validation list
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailValidationListById'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorListDeleteSuccess|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailValidationListByIdWithHttpInfo($id, string $contentType = self::contentTypes['deleteEmailValidationListById'][0])
    {
        $request = $this->deleteEmailValidationListByIdRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorListDeleteSuccess' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorListDeleteSuccess' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorListDeleteSuccess', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorListDeleteSuccess';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorListDeleteSuccess',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEmailValidationListByIdAsync
     *
     * Delete email validation list
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailValidationListById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailValidationListByIdAsync($id, string $contentType = self::contentTypes['deleteEmailValidationListById'][0])
    {
        return $this->deleteEmailValidationListByIdAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmailValidationListByIdAsyncWithHttpInfo
     *
     * Delete email validation list
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailValidationListById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailValidationListByIdAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteEmailValidationListById'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorListDeleteSuccess';
        $request = $this->deleteEmailValidationListByIdRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmailValidationListById'
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailValidationListById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEmailValidationListByIdRequest($id, string $contentType = self::contentTypes['deleteEmailValidationListById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteEmailValidationListById'
            );
        }


        $resourcePath = '/emailvalidation/lists/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'Id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportCSVValidatedEmailsByList
     *
     * Export Validated Emails by Email Validation List to CSV File
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportCSVValidatedEmailsByList'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody
     */
    public function exportCSVValidatedEmailsByList($id, string $contentType = self::contentTypes['exportCSVValidatedEmailsByList'][0])
    {
        list($response) = $this->exportCSVValidatedEmailsByListWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation exportCSVValidatedEmailsByListWithHttpInfo
     *
     * Export Validated Emails by Email Validation List to CSV File
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportCSVValidatedEmailsByList'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportCSVValidatedEmailsByListWithHttpInfo($id, string $contentType = self::contentTypes['exportCSVValidatedEmailsByList'][0])
    {
        $request = $this->exportCSVValidatedEmailsByListRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportCSVValidatedEmailsByListAsync
     *
     * Export Validated Emails by Email Validation List to CSV File
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportCSVValidatedEmailsByList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportCSVValidatedEmailsByListAsync($id, string $contentType = self::contentTypes['exportCSVValidatedEmailsByList'][0])
    {
        return $this->exportCSVValidatedEmailsByListAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportCSVValidatedEmailsByListAsyncWithHttpInfo
     *
     * Export Validated Emails by Email Validation List to CSV File
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportCSVValidatedEmailsByList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportCSVValidatedEmailsByListAsyncWithHttpInfo($id, string $contentType = self::contentTypes['exportCSVValidatedEmailsByList'][0])
    {
        $returnType = 'string';
        $request = $this->exportCSVValidatedEmailsByListRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportCSVValidatedEmailsByList'
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportCSVValidatedEmailsByList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportCSVValidatedEmailsByListRequest($id, string $contentType = self::contentTypes['exportCSVValidatedEmailsByList'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling exportCSVValidatedEmailsByList'
            );
        }


        $resourcePath = '/emailvalidation/lists/{Id}/csv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'Id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/csv', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailValidationDataByEmailId
     *
     * Get Email validation data by email ID.
     *
     * @param  int $id Id (required)
     * @param  int $email_id Email validation ID obtained from the list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationDataByEmailId'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorListEmailDetails|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody
     */
    public function getEmailValidationDataByEmailId($id, $email_id, string $contentType = self::contentTypes['getEmailValidationDataByEmailId'][0])
    {
        list($response) = $this->getEmailValidationDataByEmailIdWithHttpInfo($id, $email_id, $contentType);
        return $response;
    }

    /**
     * Operation getEmailValidationDataByEmailIdWithHttpInfo
     *
     * Get Email validation data by email ID.
     *
     * @param  int $id Id (required)
     * @param  int $email_id Email validation ID obtained from the list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationDataByEmailId'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorListEmailDetails|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailValidationDataByEmailIdWithHttpInfo($id, $email_id, string $contentType = self::contentTypes['getEmailValidationDataByEmailId'][0])
    {
        $request = $this->getEmailValidationDataByEmailIdRequest($id, $email_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorListEmailDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorListEmailDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorListEmailDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorListEmailDetails';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorListEmailDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailValidationDataByEmailIdAsync
     *
     * Get Email validation data by email ID.
     *
     * @param  int $id Id (required)
     * @param  int $email_id Email validation ID obtained from the list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationDataByEmailId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailValidationDataByEmailIdAsync($id, $email_id, string $contentType = self::contentTypes['getEmailValidationDataByEmailId'][0])
    {
        return $this->getEmailValidationDataByEmailIdAsyncWithHttpInfo($id, $email_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailValidationDataByEmailIdAsyncWithHttpInfo
     *
     * Get Email validation data by email ID.
     *
     * @param  int $id Id (required)
     * @param  int $email_id Email validation ID obtained from the list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationDataByEmailId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailValidationDataByEmailIdAsyncWithHttpInfo($id, $email_id, string $contentType = self::contentTypes['getEmailValidationDataByEmailId'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorListEmailDetails';
        $request = $this->getEmailValidationDataByEmailIdRequest($id, $email_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailValidationDataByEmailId'
     *
     * @param  int $id Id (required)
     * @param  int $email_id Email validation ID obtained from the list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationDataByEmailId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailValidationDataByEmailIdRequest($id, $email_id, string $contentType = self::contentTypes['getEmailValidationDataByEmailId'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getEmailValidationDataByEmailId'
            );
        }

        // verify the required parameter 'email_id' is set
        if ($email_id === null || (is_array($email_id) && count($email_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_id when calling getEmailValidationDataByEmailId'
            );
        }


        $resourcePath = '/emailvalidation/lists/{Id}/emails/{emailId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'Id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($email_id !== null) {
            $resourcePath = str_replace(
                '{' . 'emailId' . '}',
                ObjectSerializer::toPathValue($email_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailValidationListSummary
     *
     * Get Email validation list details
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationListSummary'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorList|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody
     */
    public function getEmailValidationListSummary($id, string $contentType = self::contentTypes['getEmailValidationListSummary'][0])
    {
        list($response) = $this->getEmailValidationListSummaryWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getEmailValidationListSummaryWithHttpInfo
     *
     * Get Email validation list details
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationListSummary'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorList|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailValidationListSummaryWithHttpInfo($id, string $contentType = self::contentTypes['getEmailValidationListSummary'][0])
    {
        $request = $this->getEmailValidationListSummaryRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailValidationListSummaryAsync
     *
     * Get Email validation list details
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationListSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailValidationListSummaryAsync($id, string $contentType = self::contentTypes['getEmailValidationListSummary'][0])
    {
        return $this->getEmailValidationListSummaryAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailValidationListSummaryAsyncWithHttpInfo
     *
     * Get Email validation list details
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationListSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailValidationListSummaryAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getEmailValidationListSummary'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorList';
        $request = $this->getEmailValidationListSummaryRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailValidationListSummary'
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationListSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailValidationListSummaryRequest($id, string $contentType = self::contentTypes['getEmailValidationListSummary'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getEmailValidationListSummary'
            );
        }


        $resourcePath = '/emailvalidation/lists/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'Id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailValidationLists
     *
     * Get Email validation lists information
     *
     * @param  \DateTime $from Start date (required)
     * @param  \DateTime $to End date (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit The numbers of rows per page to return (optional, default to 10)
     * @param  string $tz Timezone Offset (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationLists'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorSucessResponsetBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError
     */
    public function getEmailValidationLists($from, $to, $page = 1, $limit = 10, $tz = null, string $contentType = self::contentTypes['getEmailValidationLists'][0])
    {
        list($response) = $this->getEmailValidationListsWithHttpInfo($from, $to, $page, $limit, $tz, $contentType);
        return $response;
    }

    /**
     * Operation getEmailValidationListsWithHttpInfo
     *
     * Get Email validation lists information
     *
     * @param  \DateTime $from Start date (required)
     * @param  \DateTime $to End date (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit The numbers of rows per page to return (optional, default to 10)
     * @param  string $tz Timezone Offset (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationLists'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorSucessResponsetBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailValidationListsWithHttpInfo($from, $to, $page = 1, $limit = 10, $tz = null, string $contentType = self::contentTypes['getEmailValidationLists'][0])
    {
        $request = $this->getEmailValidationListsRequest($from, $to, $page, $limit, $tz, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorSucessResponsetBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorSucessResponsetBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorSucessResponsetBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorSucessResponsetBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorSucessResponsetBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailValidationListsAsync
     *
     * Get Email validation lists information
     *
     * @param  \DateTime $from Start date (required)
     * @param  \DateTime $to End date (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit The numbers of rows per page to return (optional, default to 10)
     * @param  string $tz Timezone Offset (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationLists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailValidationListsAsync($from, $to, $page = 1, $limit = 10, $tz = null, string $contentType = self::contentTypes['getEmailValidationLists'][0])
    {
        return $this->getEmailValidationListsAsyncWithHttpInfo($from, $to, $page, $limit, $tz, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailValidationListsAsyncWithHttpInfo
     *
     * Get Email validation lists information
     *
     * @param  \DateTime $from Start date (required)
     * @param  \DateTime $to End date (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit The numbers of rows per page to return (optional, default to 10)
     * @param  string $tz Timezone Offset (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationLists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailValidationListsAsyncWithHttpInfo($from, $to, $page = 1, $limit = 10, $tz = null, string $contentType = self::contentTypes['getEmailValidationLists'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorSucessResponsetBody';
        $request = $this->getEmailValidationListsRequest($from, $to, $page, $limit, $tz, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailValidationLists'
     *
     * @param  \DateTime $from Start date (required)
     * @param  \DateTime $to End date (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit The numbers of rows per page to return (optional, default to 10)
     * @param  string $tz Timezone Offset (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationLists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailValidationListsRequest($from, $to, $page = 1, $limit = 10, $tz = null, string $contentType = self::contentTypes['getEmailValidationLists'][0])
    {

        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling getEmailValidationLists'
            );
        }

        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling getEmailValidationLists'
            );
        }

        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling EmailValidatorApi.getEmailValidationLists, must be bigger than or equal to 1.');
        }
        
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling EmailValidatorApi.getEmailValidationLists, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/emailvalidation/lists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tz,
            'tz', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailValidationSubscription
     *
     * Get Email Validation subscription
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationSubscription'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorSubscription|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError
     */
    public function getEmailValidationSubscription(string $contentType = self::contentTypes['getEmailValidationSubscription'][0])
    {
        list($response) = $this->getEmailValidationSubscriptionWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getEmailValidationSubscriptionWithHttpInfo
     *
     * Get Email Validation subscription
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationSubscription'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorSubscription|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailValidationSubscriptionWithHttpInfo(string $contentType = self::contentTypes['getEmailValidationSubscription'][0])
    {
        $request = $this->getEmailValidationSubscriptionRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorSubscription' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorSubscription' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorSubscription', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorSubscription';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorSubscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailValidationSubscriptionAsync
     *
     * Get Email Validation subscription
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationSubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailValidationSubscriptionAsync(string $contentType = self::contentTypes['getEmailValidationSubscription'][0])
    {
        return $this->getEmailValidationSubscriptionAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailValidationSubscriptionAsyncWithHttpInfo
     *
     * Get Email Validation subscription
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationSubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailValidationSubscriptionAsyncWithHttpInfo(string $contentType = self::contentTypes['getEmailValidationSubscription'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorSubscription';
        $request = $this->getEmailValidationSubscriptionRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailValidationSubscription'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmailValidationSubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmailValidationSubscriptionRequest(string $contentType = self::contentTypes['getEmailValidationSubscription'][0])
    {


        $resourcePath = '/emailvalidation/subscription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getValidatedEmailsByList
     *
     * Get Validated Emails by Email Validation List
     *
     * @param  int $id Id (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit The numbers of rows per page to return (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidatedEmailsByList'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorValidatedMailsResults|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody
     */
    public function getValidatedEmailsByList($id, $page = 1, $limit = 10, string $contentType = self::contentTypes['getValidatedEmailsByList'][0])
    {
        list($response) = $this->getValidatedEmailsByListWithHttpInfo($id, $page, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getValidatedEmailsByListWithHttpInfo
     *
     * Get Validated Emails by Email Validation List
     *
     * @param  int $id Id (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit The numbers of rows per page to return (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidatedEmailsByList'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorValidatedMailsResults|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getValidatedEmailsByListWithHttpInfo($id, $page = 1, $limit = 10, string $contentType = self::contentTypes['getValidatedEmailsByList'][0])
    {
        $request = $this->getValidatedEmailsByListRequest($id, $page, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorValidatedMailsResults' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorValidatedMailsResults' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorValidatedMailsResults', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorValidatedMailsResults';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorValidatedMailsResults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getValidatedEmailsByListAsync
     *
     * Get Validated Emails by Email Validation List
     *
     * @param  int $id Id (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit The numbers of rows per page to return (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidatedEmailsByList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getValidatedEmailsByListAsync($id, $page = 1, $limit = 10, string $contentType = self::contentTypes['getValidatedEmailsByList'][0])
    {
        return $this->getValidatedEmailsByListAsyncWithHttpInfo($id, $page, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getValidatedEmailsByListAsyncWithHttpInfo
     *
     * Get Validated Emails by Email Validation List
     *
     * @param  int $id Id (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit The numbers of rows per page to return (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidatedEmailsByList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getValidatedEmailsByListAsyncWithHttpInfo($id, $page = 1, $limit = 10, string $contentType = self::contentTypes['getValidatedEmailsByList'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorValidatedMailsResults';
        $request = $this->getValidatedEmailsByListRequest($id, $page, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getValidatedEmailsByList'
     *
     * @param  int $id Id (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $limit The numbers of rows per page to return (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidatedEmailsByList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getValidatedEmailsByListRequest($id, $page = 1, $limit = 10, string $contentType = self::contentTypes['getValidatedEmailsByList'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getValidatedEmailsByList'
            );
        }

        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling EmailValidatorApi.getValidatedEmailsByList, must be bigger than or equal to 1.');
        }
        
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling EmailValidatorApi.getValidatedEmailsByList, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/emailvalidation/lists/{Id}/emails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'Id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadEmailValidationFile
     *
     * Upload file for email validation
     *
     * @param  \SplFileObject $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadEmailValidationFile'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidationUploadResponse|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorUploadBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError
     */
    public function uploadEmailValidationFile($file = null, string $contentType = self::contentTypes['uploadEmailValidationFile'][0])
    {
        list($response) = $this->uploadEmailValidationFileWithHttpInfo($file, $contentType);
        return $response;
    }

    /**
     * Operation uploadEmailValidationFileWithHttpInfo
     *
     * Upload file for email validation
     *
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadEmailValidationFile'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidationUploadResponse|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorUploadBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadEmailValidationFileWithHttpInfo($file = null, string $contentType = self::contentTypes['uploadEmailValidationFile'][0])
    {
        $request = $this->uploadEmailValidationFileRequest($file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidationUploadResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidationUploadResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidationUploadResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorUploadBadRequestResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorUploadBadRequestResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorUploadBadRequestResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidationUploadResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidationUploadResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorUploadBadRequestResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadEmailValidationFileAsync
     *
     * Upload file for email validation
     *
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadEmailValidationFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadEmailValidationFileAsync($file = null, string $contentType = self::contentTypes['uploadEmailValidationFile'][0])
    {
        return $this->uploadEmailValidationFileAsyncWithHttpInfo($file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadEmailValidationFileAsyncWithHttpInfo
     *
     * Upload file for email validation
     *
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadEmailValidationFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadEmailValidationFileAsyncWithHttpInfo($file = null, string $contentType = self::contentTypes['uploadEmailValidationFile'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidationUploadResponse';
        $request = $this->uploadEmailValidationFileRequest($file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadEmailValidationFile'
     *
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadEmailValidationFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadEmailValidationFileRequest($file = null, string $contentType = self::contentTypes['uploadEmailValidationFile'][0])
    {



        $resourcePath = '/emailvalidation/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateEmail
     *
     * Validate single email address
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailAddressRequestBody $email_address_request_body email_address_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateEmail'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorMailDetails|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorValidateBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError
     */
    public function validateEmail($email_address_request_body, string $contentType = self::contentTypes['validateEmail'][0])
    {
        list($response) = $this->validateEmailWithHttpInfo($email_address_request_body, $contentType);
        return $response;
    }

    /**
     * Operation validateEmailWithHttpInfo
     *
     * Validate single email address
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailAddressRequestBody $email_address_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateEmail'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorMailDetails|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorValidateBadRequestResponseBody|\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateEmailWithHttpInfo($email_address_request_body, string $contentType = self::contentTypes['validateEmail'][0])
    {
        $request = $this->validateEmailRequest($email_address_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorMailDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorMailDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorMailDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorValidateBadRequestResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorValidateBadRequestResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorValidateBadRequestResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorMailDetails';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorMailDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorValidateBadRequestResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateEmailAsync
     *
     * Validate single email address
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailAddressRequestBody $email_address_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateEmailAsync($email_address_request_body, string $contentType = self::contentTypes['validateEmail'][0])
    {
        return $this->validateEmailAsyncWithHttpInfo($email_address_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateEmailAsyncWithHttpInfo
     *
     * Validate single email address
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailAddressRequestBody $email_address_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateEmailAsyncWithHttpInfo($email_address_request_body, string $contentType = self::contentTypes['validateEmail'][0])
    {
        $returnType = '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorMailDetails';
        $request = $this->validateEmailRequest($email_address_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateEmail'
     *
     * @param  \API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailAddressRequestBody $email_address_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function validateEmailRequest($email_address_request_body, string $contentType = self::contentTypes['validateEmail'][0])
    {

        // verify the required parameter 'email_address_request_body' is set
        if ($email_address_request_body === null || (is_array($email_address_request_body) && count($email_address_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_address_request_body when calling validateEmail'
            );
        }


        $resourcePath = '/emailvalidation/validateEmail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($email_address_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($email_address_request_body));
            } else {
                $httpBody = $email_address_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateEmailValidatorList
     *
     * Validate list in Email Validator
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateEmailValidatorList'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function validateEmailValidatorList($id, string $contentType = self::contentTypes['validateEmailValidatorList'][0])
    {
        $this->validateEmailValidatorListWithHttpInfo($id, $contentType);
    }

    /**
     * Operation validateEmailValidatorListWithHttpInfo
     *
     * Validate list in Email Validator
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateEmailValidatorList'] to see the possible values for this operation
     *
     * @throws \API_TurboSMTP_Invoker\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateEmailValidatorListWithHttpInfo($id, string $contentType = self::contentTypes['validateEmailValidatorList'][0])
    {
        $request = $this->validateEmailValidatorListRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\AuthorizationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\EmailValidatorValidateListBadRequestResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\CommonMessageResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateEmailValidatorListAsync
     *
     * Validate list in Email Validator
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateEmailValidatorList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateEmailValidatorListAsync($id, string $contentType = self::contentTypes['validateEmailValidatorList'][0])
    {
        return $this->validateEmailValidatorListAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateEmailValidatorListAsyncWithHttpInfo
     *
     * Validate list in Email Validator
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateEmailValidatorList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateEmailValidatorListAsyncWithHttpInfo($id, string $contentType = self::contentTypes['validateEmailValidatorList'][0])
    {
        $returnType = '';
        $request = $this->validateEmailValidatorListRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateEmailValidatorList'
     *
     * @param  int $id Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateEmailValidatorList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function validateEmailValidatorListRequest($id, string $contentType = self::contentTypes['validateEmailValidatorList'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling validateEmailValidatorList'
            );
        }


        $resourcePath = '/emailvalidation/lists/{Id}/validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'Id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerSecret');
        if ($apiKey !== null) {
            $headers['consumerSecret'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('consumerKey');
        if ($apiKey !== null) {
            $headers['consumerKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
