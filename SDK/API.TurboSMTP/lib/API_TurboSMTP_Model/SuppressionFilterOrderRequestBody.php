<?php
/**
 * SuppressionFilterOrderRequestBody
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  API_TurboSMTP_Invoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TurboSMTP Public APIs
 *
 * This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Useful Links for Developers  - [Email SDKs for Developers](https://serversmtp.com/email-sdks-for-developers) - [Webhooks Reference](https://serversmtp.com/event-webhook-reference/) - [Email API for Developers](https://serversmtp.com/email-api-for-developers)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.
 *
 * The version of the OpenAPI document: 2.0.0-oas3
 * Contact: api@turbo-smtp.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace API_TurboSMTP_Invoker\API_TurboSMTP_Model;

use \ArrayAccess;
use \API_TurboSMTP_Invoker\ObjectSerializer;

/**
 * SuppressionFilterOrderRequestBody Class Doc Comment
 *
 * @category Class
 * @package  API_TurboSMTP_Invoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SuppressionFilterOrderRequestBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SuppressionFilterOrderRequestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'from' => '\DateTime',
        'to' => '\DateTime',
        'tz' => 'string',
        'filter' => 'string',
        'filter_by' => '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SuppressionSource[]',
        'smart_search' => 'bool',
        'restrict' => '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SuppressionRestriction[]',
        'orderby' => '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\SuppressionOrderBy',
        'ordertype' => '\API_TurboSMTP_Invoker\API_TurboSMTP_Model\OrderType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'from' => 'date',
        'to' => 'date',
        'tz' => null,
        'filter' => null,
        'filter_by' => null,
        'smart_search' => null,
        'restrict' => null,
        'orderby' => null,
        'ordertype' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'from' => false,
        'to' => false,
        'tz' => false,
        'filter' => false,
        'filter_by' => false,
        'smart_search' => true,
        'restrict' => false,
        'orderby' => false,
        'ordertype' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from' => 'from',
        'to' => 'to',
        'tz' => 'tz',
        'filter' => 'filter',
        'filter_by' => 'filter_by',
        'smart_search' => 'smart_search',
        'restrict' => 'restrict',
        'orderby' => 'orderby',
        'ordertype' => 'ordertype'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from' => 'setFrom',
        'to' => 'setTo',
        'tz' => 'setTz',
        'filter' => 'setFilter',
        'filter_by' => 'setFilterBy',
        'smart_search' => 'setSmartSearch',
        'restrict' => 'setRestrict',
        'orderby' => 'setOrderby',
        'ordertype' => 'setOrdertype'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from' => 'getFrom',
        'to' => 'getTo',
        'tz' => 'getTz',
        'filter' => 'getFilter',
        'filter_by' => 'getFilterBy',
        'smart_search' => 'getSmartSearch',
        'restrict' => 'getRestrict',
        'orderby' => 'getOrderby',
        'ordertype' => 'getOrdertype'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('tz', $data ?? [], null);
        $this->setIfExists('filter', $data ?? [], null);
        $this->setIfExists('filter_by', $data ?? [], null);
        $this->setIfExists('smart_search', $data ?? [], false);
        $this->setIfExists('restrict', $data ?? [], null);
        $this->setIfExists('orderby', $data ?? [], null);
        $this->setIfExists('ordertype', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['from'] === null) {
            $invalidProperties[] = "'from' can't be null";
        }
        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets from
     *
     * @return \DateTime
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param \DateTime $from Start date
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return \DateTime
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param \DateTime $to End date
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets tz
     *
     * @return string|null
     */
    public function getTz()
    {
        return $this->container['tz'];
    }

    /**
     * Sets tz
     *
     * @param string|null $tz Timezone Offset
     *
     * @return self
     */
    public function setTz($tz)
    {
        if (is_null($tz)) {
            throw new \InvalidArgumentException('non-nullable tz cannot be null');
        }
        $this->container['tz'] = $tz;

        return $this;
    }

    /**
     * Gets filter
     *
     * @return string|null
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     *
     * @param string|null $filter Query to search
     *
     * @return self
     */
    public function setFilter($filter)
    {
        if (is_null($filter)) {
            throw new \InvalidArgumentException('non-nullable filter cannot be null');
        }
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets filter_by
     *
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SuppressionSource[]|null
     */
    public function getFilterBy()
    {
        return $this->container['filter_by'];
    }

    /**
     * Sets filter_by
     *
     * @param \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SuppressionSource[]|null $filter_by Filter by
     *
     * @return self
     */
    public function setFilterBy($filter_by)
    {
        if (is_null($filter_by)) {
            throw new \InvalidArgumentException('non-nullable filter_by cannot be null');
        }
        $this->container['filter_by'] = $filter_by;

        return $this;
    }

    /**
     * Gets smart_search
     *
     * @return bool|null
     */
    public function getSmartSearch()
    {
        return $this->container['smart_search'];
    }

    /**
     * Sets smart_search
     *
     * @param bool|null $smart_search Smart search
     *
     * @return self
     */
    public function setSmartSearch($smart_search)
    {
        if (is_null($smart_search)) {
            array_push($this->openAPINullablesSetToNull, 'smart_search');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('smart_search', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['smart_search'] = $smart_search;

        return $this;
    }

    /**
     * Gets restrict
     *
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SuppressionRestriction[]|null
     */
    public function getRestrict()
    {
        return $this->container['restrict'];
    }

    /**
     * Sets restrict
     *
     * @param \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SuppressionRestriction[]|null $restrict xxxx
     *
     * @return self
     */
    public function setRestrict($restrict)
    {
        if (is_null($restrict)) {
            throw new \InvalidArgumentException('non-nullable restrict cannot be null');
        }
        $this->container['restrict'] = $restrict;

        return $this;
    }

    /**
     * Gets orderby
     *
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SuppressionOrderBy|null
     */
    public function getOrderby()
    {
        return $this->container['orderby'];
    }

    /**
     * Sets orderby
     *
     * @param \API_TurboSMTP_Invoker\API_TurboSMTP_Model\SuppressionOrderBy|null $orderby orderby
     *
     * @return self
     */
    public function setOrderby($orderby)
    {
        if (is_null($orderby)) {
            throw new \InvalidArgumentException('non-nullable orderby cannot be null');
        }
        $this->container['orderby'] = $orderby;

        return $this;
    }

    /**
     * Gets ordertype
     *
     * @return \API_TurboSMTP_Invoker\API_TurboSMTP_Model\OrderType|null
     */
    public function getOrdertype()
    {
        return $this->container['ordertype'];
    }

    /**
     * Sets ordertype
     *
     * @param \API_TurboSMTP_Invoker\API_TurboSMTP_Model\OrderType|null $ordertype ordertype
     *
     * @return self
     */
    public function setOrdertype($ordertype)
    {
        if (is_null($ordertype)) {
            throw new \InvalidArgumentException('non-nullable ordertype cannot be null');
        }
        $this->container['ordertype'] = $ordertype;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


