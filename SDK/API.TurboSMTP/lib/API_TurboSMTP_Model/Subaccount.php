<?php
/**
 * Subaccount
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  API_TurboSMTP_Invoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TurboSMTP Public APIs
 *
 * This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Useful Links for Developers  - [Email SDKs for Developers](https://serversmtp.com/email-sdks-for-developers) - [Webhooks Reference](https://serversmtp.com/event-webhook-reference/) - [Email API for Developers](https://serversmtp.com/email-api-for-developers)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.
 *
 * The version of the OpenAPI document: 2.0.0-oas3
 * Contact: api@turbo-smtp.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace API_TurboSMTP_Invoker\API_TurboSMTP_Model;

use \ArrayAccess;
use \API_TurboSMTP_Invoker\ObjectSerializer;

/**
 * Subaccount Class Doc Comment
 *
 * @category Class
 * @package  API_TurboSMTP_Invoker
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Subaccount implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Subaccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email' => 'string',
        'ip' => 'string',
        'active' => 'bool',
        'subaccount_id' => 'int',
        'parent_id' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'address_1' => 'string',
        'address_2' => 'string',
        'city' => 'string',
        'company_name' => 'string',
        'country' => 'string',
        'region' => 'string',
        'zip_code' => 'string',
        'phone_number' => 'string',
        'policy_agree' => 'bool',
        'site_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'email' => 'email',
        'ip' => null,
        'active' => null,
        'subaccount_id' => null,
        'parent_id' => null,
        'first_name' => null,
        'last_name' => null,
        'address_1' => null,
        'address_2' => null,
        'city' => null,
        'company_name' => null,
        'country' => null,
        'region' => null,
        'zip_code' => null,
        'phone_number' => null,
        'policy_agree' => null,
        'site_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'email' => false,
        'ip' => false,
        'active' => false,
        'subaccount_id' => false,
        'parent_id' => false,
        'first_name' => false,
        'last_name' => false,
        'address_1' => true,
        'address_2' => true,
        'city' => true,
        'company_name' => true,
        'country' => true,
        'region' => true,
        'zip_code' => true,
        'phone_number' => true,
        'policy_agree' => false,
        'site_url' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'ip' => 'ip',
        'active' => 'active',
        'subaccount_id' => 'subaccount_id',
        'parent_id' => 'parent_id',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'address_1' => 'address_1',
        'address_2' => 'address_2',
        'city' => 'city',
        'company_name' => 'company_name',
        'country' => 'country',
        'region' => 'region',
        'zip_code' => 'zip_code',
        'phone_number' => 'phone_number',
        'policy_agree' => 'policy_agree',
        'site_url' => 'site_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'ip' => 'setIp',
        'active' => 'setActive',
        'subaccount_id' => 'setSubaccountId',
        'parent_id' => 'setParentId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'address_1' => 'setAddress1',
        'address_2' => 'setAddress2',
        'city' => 'setCity',
        'company_name' => 'setCompanyName',
        'country' => 'setCountry',
        'region' => 'setRegion',
        'zip_code' => 'setZipCode',
        'phone_number' => 'setPhoneNumber',
        'policy_agree' => 'setPolicyAgree',
        'site_url' => 'setSiteUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'ip' => 'getIp',
        'active' => 'getActive',
        'subaccount_id' => 'getSubaccountId',
        'parent_id' => 'getParentId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'address_1' => 'getAddress1',
        'address_2' => 'getAddress2',
        'city' => 'getCity',
        'company_name' => 'getCompanyName',
        'country' => 'getCountry',
        'region' => 'getRegion',
        'zip_code' => 'getZipCode',
        'phone_number' => 'getPhoneNumber',
        'policy_agree' => 'getPolicyAgree',
        'site_url' => 'getSiteUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('ip', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('subaccount_id', $data ?? [], null);
        $this->setIfExists('parent_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('address_1', $data ?? [], null);
        $this->setIfExists('address_2', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('company_name', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('zip_code', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('policy_agree', $data ?? [], null);
        $this->setIfExists('site_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['address_1']) && (mb_strlen($this->container['address_1']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_1', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_1']) && (mb_strlen($this->container['address_1']) < 1)) {
            $invalidProperties[] = "invalid value for 'address_1', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['address_2']) && (mb_strlen($this->container['address_2']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_2']) && (mb_strlen($this->container['address_2']) < 1)) {
            $invalidProperties[] = "invalid value for 'address_2', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 100)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) < 1)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['company_name']) && (mb_strlen($this->container['company_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['company_name']) && (mb_strlen($this->container['company_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 64)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) < 1)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['region']) && (mb_strlen($this->container['region']) > 100)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['region']) && (mb_strlen($this->container['region']) < 1)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['zip_code']) && (mb_strlen($this->container['zip_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'zip_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['zip_code']) && (mb_strlen($this->container['zip_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'zip_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['site_url']) && (mb_strlen($this->container['site_url']) > 45)) {
            $invalidProperties[] = "invalid value for 'site_url', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['site_url']) && (mb_strlen($this->container['site_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'site_url', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip IP address to use for sending emails.
     *
     * @return self
     */
    public function setIp($ip)
    {
        if (is_null($ip)) {
            throw new \InvalidArgumentException('non-nullable ip cannot be null');
        }
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Active subaccounts can be used for login purpose, while users can´t login to inactive subaccounts. Notice that in order to be able to send emails the subaccount subscription must also be active. User can set subaccounts to active / inactive from the dashboard.
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets subaccount_id
     *
     * @return int|null
     */
    public function getSubaccountId()
    {
        return $this->container['subaccount_id'];
    }

    /**
     * Sets subaccount_id
     *
     * @param int|null $subaccount_id Sub account Id
     *
     * @return self
     */
    public function setSubaccountId($subaccount_id)
    {
        if (is_null($subaccount_id)) {
            throw new \InvalidArgumentException('non-nullable subaccount_id cannot be null');
        }
        $this->container['subaccount_id'] = $subaccount_id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int|null $parent_id Sub account parent Id
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        if (is_null($parent_id)) {
            throw new \InvalidArgumentException('non-nullable parent_id cannot be null');
        }
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name subaccount owner first name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        if ((mb_strlen($first_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Subaccount., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($first_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Subaccount., must be bigger than or equal to 1.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name subaccount owner last name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        if ((mb_strlen($last_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Subaccount., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($last_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Subaccount., must be bigger than or equal to 1.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets address_1
     *
     * @return string|null
     */
    public function getAddress1()
    {
        return $this->container['address_1'];
    }

    /**
     * Sets address_1
     *
     * @param string|null $address_1 Address Line 1
     *
     * @return self
     */
    public function setAddress1($address_1)
    {
        if (is_null($address_1)) {
            array_push($this->openAPINullablesSetToNull, 'address_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($address_1) && (mb_strlen($address_1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_1 when calling Subaccount., must be smaller than or equal to 255.');
        }
        if (!is_null($address_1) && (mb_strlen($address_1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address_1 when calling Subaccount., must be bigger than or equal to 1.');
        }

        $this->container['address_1'] = $address_1;

        return $this;
    }

    /**
     * Gets address_2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address_2'];
    }

    /**
     * Sets address_2
     *
     * @param string|null $address_2 Address Line 2
     *
     * @return self
     */
    public function setAddress2($address_2)
    {
        if (is_null($address_2)) {
            array_push($this->openAPINullablesSetToNull, 'address_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($address_2) && (mb_strlen($address_2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_2 when calling Subaccount., must be smaller than or equal to 255.');
        }
        if (!is_null($address_2) && (mb_strlen($address_2) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address_2 when calling Subaccount., must be bigger than or equal to 1.');
        }

        $this->container['address_2'] = $address_2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            array_push($this->openAPINullablesSetToNull, 'city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($city) && (mb_strlen($city) > 100)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Subaccount., must be smaller than or equal to 100.');
        }
        if (!is_null($city) && (mb_strlen($city) < 1)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Subaccount., must be bigger than or equal to 1.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name Agency Name
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (is_null($company_name)) {
            array_push($this->openAPINullablesSetToNull, 'company_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($company_name) && (mb_strlen($company_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling Subaccount., must be smaller than or equal to 100.');
        }
        if (!is_null($company_name) && (mb_strlen($company_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling Subaccount., must be bigger than or equal to 1.');
        }

        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($country) && (mb_strlen($country) > 64)) {
            throw new \InvalidArgumentException('invalid length for $country when calling Subaccount., must be smaller than or equal to 64.');
        }
        if (!is_null($country) && (mb_strlen($country) < 1)) {
            throw new \InvalidArgumentException('invalid length for $country when calling Subaccount., must be bigger than or equal to 1.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region Region
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            array_push($this->openAPINullablesSetToNull, 'region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($region) && (mb_strlen($region) > 100)) {
            throw new \InvalidArgumentException('invalid length for $region when calling Subaccount., must be smaller than or equal to 100.');
        }
        if (!is_null($region) && (mb_strlen($region) < 1)) {
            throw new \InvalidArgumentException('invalid length for $region when calling Subaccount., must be bigger than or equal to 1.');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string|null $zip_code Zip Code
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        if (is_null($zip_code)) {
            array_push($this->openAPINullablesSetToNull, 'zip_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zip_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($zip_code) && (mb_strlen($zip_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $zip_code when calling Subaccount., must be smaller than or equal to 10.');
        }
        if (!is_null($zip_code) && (mb_strlen($zip_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $zip_code when calling Subaccount., must be bigger than or equal to 1.');
        }

        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number Phone Number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($phone_number) && (mb_strlen($phone_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling Subaccount., must be smaller than or equal to 30.');
        }
        if (!is_null($phone_number) && (mb_strlen($phone_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling Subaccount., must be bigger than or equal to 1.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets policy_agree
     *
     * @return bool|null
     */
    public function getPolicyAgree()
    {
        return $this->container['policy_agree'];
    }

    /**
     * Sets policy_agree
     *
     * @param bool|null $policy_agree Policy must be agreed in order to be able to create a subaccount.
     *
     * @return self
     */
    public function setPolicyAgree($policy_agree)
    {
        if (is_null($policy_agree)) {
            throw new \InvalidArgumentException('non-nullable policy_agree cannot be null');
        }
        $this->container['policy_agree'] = $policy_agree;

        return $this;
    }

    /**
     * Gets site_url
     *
     * @return string|null
     */
    public function getSiteUrl()
    {
        return $this->container['site_url'];
    }

    /**
     * Sets site_url
     *
     * @param string|null $site_url Website
     *
     * @return self
     */
    public function setSiteUrl($site_url)
    {
        if (is_null($site_url)) {
            array_push($this->openAPINullablesSetToNull, 'site_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('site_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($site_url) && (mb_strlen($site_url) > 45)) {
            throw new \InvalidArgumentException('invalid length for $site_url when calling Subaccount., must be smaller than or equal to 45.');
        }
        if (!is_null($site_url) && (mb_strlen($site_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $site_url when calling Subaccount., must be bigger than or equal to 1.');
        }

        $this->container['site_url'] = $site_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


